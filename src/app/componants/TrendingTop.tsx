import React, { useState } from 'react';
import Image from 'next/image';

const AnimatedHeader = () => (
  <div className="relative flex flex-col items-center justify-center mb-16">
    <div className="flex items-center justify-center gap-8 mb-6">
      <div className="transform hover:rotate-12 transition-transform duration-300">
        <Image
          src="/icons/logo.png"
          alt="NFT Marketplace"
          width={70}
          height={70}
          className="animate-pulse"
        />
      </div>
      <h2 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
        Getting Started!
      </h2>
      <div className="transform hover:-rotate-12 transition-transform duration-300">
        <Image
          src="/icons/logo.png"
          alt="NFT Marketplace"
          width={70}
          height={70}
          className="animate-pulse"
        />
      </div>
    </div>
    <div className="relative group">
      <div className="absolute -inset-1 bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg blur opacity-10 group-hover:opacity-20 transition duration-1000 group-hover:duration-200"></div>
      <div className="relative px-8 py-4 bg-white bg-opacity-90 backdrop-blur-sm rounded-lg shadow-xl">
        <p className="text-xl font-medium bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
          <span className="font-bold">Find an X account, tokenize it, claim it to start trading</span> BUY $NUGGET {' '}
          for extra rewards{' '}
          <span className="animate-pulse inline-block">ðŸ“ˆ</span>
        </p>
      </div>
    </div>
  </div>
);

const FunIcon = ({ icon }: { icon: JSX.Element }) => (
  <div className="relative">
    <div className="absolute inset-0 bg-blue-400 rounded-xl blur-lg opacity-20 group-hover:opacity-30 transition-opacity"></div>
    <div className="relative flex-shrink-0 w-16 h-16 bg-gradient-to-br from-blue-400 to-purple-500 rounded-xl flex items-center justify-center text-white transform group-hover:scale-110 transition-transform">
      {icon}
    </div>
  </div>
);

const HowItWorks = () => {
  const [selectedFaq, setSelectedFaq] = useState<number | null>(null);

  const steps = [
    {
      number: '01',
      title: 'Create Tokens',
      description: "Look up an X account and create a token, if your the owner of the account 'claim' and start trading. You can also create accounts for other people and hope they claim",
      icon: (
        <svg className="w-10 h-10" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/>
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
          <path d="M12 6v12" strokeDasharray="2 2"/>
        </svg>
      )
    },
    {
      number: '02',
      title: 'Create Profit',
      description: "There is a 6% funding rate on all token trading, this fluctuates with the token creator's performance in trading or generating revenue. The proceeds from the funding rate are used to fund a raise wallet, which the token creator can purchase perps and memes with.",
      icon: (
        <svg className="w-10 h-10" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M22 12h-4l-3 9L9 3l-3 9H2"/>
          <circle cx="12" cy="12" r="1"/>
          <path d="M17 12c0 2.76-2.24 5-5 5s-5-2.24-5-5"/>
        </svg>
      )
    },
    {
      number: '03',
      title: 'Create Pumps',
      description: "Revenue generated by the token creator is used to automatically buyback their own token. If the creator underperforms the protocol will sell the creator's tokens in a sellback and distribute the profits from that back to the users.",
      icon: (
        <svg className="w-10 h-10" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M18 8c2 2.5 2 6.5 0 9M6 8c-2 2.5-2 6.5 0 9"/>
          <path d="M12 8v8"/>
          <path d="M12 3v3"/>
          <path d="M12 18v3"/>
          <path d="M15 5l-3-3-3 3"/>
        </svg>
      )
    }
  ];

  const faqs = [
    {
      question: 'What is the funding rate?',
      answer: 'The funding rate is the rate at which Raise taxes each transaction on creator tokens, the rate can either be stable or fluctuate based on creator revenue generating performance. For week 1 everyone will start out with 6% percent funding rate.'
    },
    {
      question: 'What are buybacks and sellbacks?',
      answer: 'Raise uses buybacks to and sellbacks to soft peg the tokens value to the ongoing performance of an AI agent or human creator.'
    },
    {
      question: 'How do I buy trader tokens, what happens if a creator has not claimed their account?',
      answer: 'Go to the "Creators" tab and click on already created accounts & navigate to the buy and sell buttons. Look up a creator by typing in their X username and create an account for them. If you see "Inactive" next to the name of a creator it means the account has not been claimed by that creator. Any fees generated by the token trading activity pre-creator claim will be escrowed in a safe wallet and distributed to them upon their claim.'
    }
  ];

  return (
    <section className="max-w-6xl mx-auto px-4 py-16">
      <AnimatedHeader />
      {/* Steps */}
      <div className="grid gap-8 md:grid-cols-3 mb-16">
        {steps.map((step, index) => (
          <div 
            key={step.number}
            className="group relative p-8 bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1"
          >
            <div className="flex flex-col items-center text-center gap-6 mb-4">
              <FunIcon icon={step.icon} />
              <div>
                <span className="inline-block px-4 py-1 bg-gradient-to-r from-blue-100 to-purple-100 rounded-full text-sm font-semibold text-blue-600 mb-2">
                  Step {step.number}
                </span>
                <h3 className="text-xl font-bold">{step.title}</h3>
              </div>
            </div>
            <p className="text-gray-600 text-center">{step.description}</p>
            {index < steps.length - 1 && (
              <div className="hidden md:block absolute -right-12 top-1/2 transform -translate-y-1/2 text-purple-300">
                <svg className="w-8 h-8 animate-pulse" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M5 12h14M15 5l7 7-7 7" />
                </svg>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* FAQ Section */}
      <div className="bg-gray-50 rounded-3xl p-8">
        <h3 className="text-2xl font-bold mb-6 text-center">Frequently Asked Questions</h3>
        <div className="space-y-4 max-w-3xl mx-auto">
          {faqs.map((faq, index) => (
            <div
              key={index}
              className="bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow duration-300"
            >
              <button
                className="w-full px-6 py-4 text-left flex justify-between items-center"
                onClick={() => setSelectedFaq(selectedFaq === index ? null : index)}
              >
                <span className="font-semibold">{faq.question}</span>
                <svg
                  className={`w-5 h-5 transform transition-transform ${
                    selectedFaq === index ? 'rotate-180' : ''
                  }`}
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                >
                  <path d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              <div
                className={`px-6 pb-4 transition-all duration-300 ${
                  selectedFaq === index ? 'block' : 'hidden'
                }`}
              >
                <p className="text-gray-600">{faq.answer}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default HowItWorks;